# Distance Matrix Comutation

 ; using KernelAbstractions
using StaticArrays
using Distributed
@kernel function distance_matrix!(A ,@Const(X_1) , @Const(X_2))
    # boilerplate
    Iᵢⱼ = @index(Global , Cartesian)
    @inbounds xᵢ= SVector{3}(view(X_1 , : , Iᵢⱼ[1]))
    @inbounds xⱼ= SVector{3}(view(X_2 , : , Iᵢⱼ[2]))
    # element computation
    @inbounds d = xᵢ - xⱼ
    @inbounds A[Iᵢⱼ] = d' * d
    end



function distM(X₁ ,X₂)
    A = zeros(size(X₁,2) , size(X₂,2))
    dist_kernel! = distance_matrix!(get_backend(A) , 8 , size(A))
    dist_kernel!(A ,X₁ , X₂ )
    KernelAbstractions.synchronize(get_backend(A))
    return A
end

function distK(X_1 , X_2)
norm_1 = sum(X_1.^2 ; dims=1)
norm_2 = sum(X_2.^2 ; dims=1)
distM = -2*(X_1'*X_2) .+ norm_1' .+ norm_2
end;



# #+RESULTS:
# : distK (generic function with 1 method)


 ; X_1 = rand(3,10_000)
X_2 = rand(3,10_000);

 ; using BenchmarkTools
@benchmark distK(X_1 , X_2);



# #+RESULTS:
# : julia-async:3fc69a5d-7ca7-4e92-b610-9868f288df17


 ; @benchmark distM(X_1, X_2);

# Kernel Implementation Implementation

 ; function rbf_gaussian(r, ::Val{γ}) where γ
    exp(- γ * r)
    end
function rbf_gaussian′(r , ::Val{γ}) where γ
    - γ * exp(- γ * r)
    end
function rbf_gaussian′′(r , ::Val{γ}) where γ
    γ^2 * exp(- γ * r)
    end
function k_gauss(x , x̂)
    rbf_gaussian(norm(x-x̂)^2 , Val(1.))
    end
function ∇k_gauss(x,x̂)
    rbf_gaussian′(norm(x-x̂)^2 , Val(1.)) * 2*(x-x̂)
    end
function Δk_gauss(x,x̂)
    d = dot(x-x̂,x-x̂)
    4*rbf_gaussian′′(d , Val(1.))  + 4*rbf_gaussian′(d , Val(1.)) * d
    end;



# #+RESULTS:
# : Δk_gauss (generic function with 1 method)


 ; using GLMakie
X = range(-5 , 5 , 100)
Y = range(-5 , 5 , 100)
using LinearAlgebra

fig = Figure()
ax = Axis3(fig[1,1] , aspect=:equal)

gauss(x) = k_gauss(x , [0,0])
z = [gauss([x,y]) for x in X , y in Y]
surface!(ax, x,y, z)
save("images/gauss-rbf.png",fig );

# PDE System
# such that they satisfy the following system


# \begin{align}
# \label{eq:pde}
# - \nabla  \left( a(x) \nabla u(x) \right) &= f(x) & \text{in} \quad \Omega \\
# u(x) &= g_D(x) & \text{on} \quad  \Gamma_D \\
# \left( a(x) \nabla u(x)  \right) \cdot  \vec{n}(x) &= g_N & \text{on} \quad \Gamma_N
# \end{align}
# where

 ; using StaticArrays
a(x::SVector{2}) = x[1] + 2
∇a(x::SVector{2}) = SVector{2}(1.,0.);



# #+RESULTS:
# : ∇a (generic function with 2 methods)


 ; α = 2
β = 0.5
f(x) = - α*norm(x ,2)^(α - 2)*(3x[1] +4) - α*(α -2) * (x[1] + 2) * norm(x,2)^(α - 3)
g_D(x) = norm(x,2)^α
g_N(x , n) = α* norm(x,2)^(α-2)*(x[1] +2) * x ⋅ n;

# Results

 ; includet("src/pdesolver.jl");



# #+RESULTS:


 ; using .PDESolvers;



# #+RESULTS:


 ; S = PDESystem(k_gauss , ∇k_gauss , Δk_gauss , a, ∇a , f, g_D , g_N );



# #+RESULTS:
# : PDESystem(Main.k_gauss, Main.∇k_gauss, Main.Δk_gauss, Main.a, Main.∇a, Main.f, Main.g_D, Main.g_N)




 ; function unit_box_normals(γ::Float64)
    p = SVector{2}(0,0)
    xnormal = SVector{2}(1,0)
    ynormal = SVector{2}(0,1)
    branch = γ % 4.
    if floor(branch) == 0.
        n = -ynormal
    elseif floor(branch) == 1.
        n = xnormal
    elseif floor(branch) == 2.
        n = ynormal
    elseif floor(branch) == 3.
        n = -xnormal
    else
        throw("γ=$γ not in range [0 , 4]")
    end
return n
    end
function unit_box_path(γ::Float64)
    p = SVector{2}(0,0)
    xnormal = SVector{2}(1,0)
    ynormal = SVector{2}(0,1)
    branch = γ % 4.
    if floor(branch) == 0.
        p = branch%1 * xnormal
    elseif floor(branch) == 1.
        p = xnormal +  branch%1 * ynormal
    elseif floor(branch) == 2.
        p = (1-branch%1)*xnormal + ynormal
    elseif floor(branch) == 3.
        p = (1-branch%1) * ynormal
    else
        throw("γ=$γ not in range [0 , 4]")
    end
return p
    end;



# #+RESULTS:
# : unit_box_path (generic function with 1 method)


 ; using Random
rng = MersenneTwister(0)
r = 0:0.2:1.99
N = unit_box_normals.(r)
N = reduce(hcat , N)
X_N = unit_box_path.(r)
X_N = reduce(hcat , X_N)
X_D = unit_box_path.(2:0.1:4)
X_D = reduce(hcat , X_D)
X_L = rand(rng , Float64, 2,100);



# #+RESULTS:
# : (("0.44373084494754944" "0.07892681580529581" "0.559106625669447" "0.9425709791902743" "0.48785917694153547" "0.7857840841423287" "0.3017574987032916" "0.6796020014334652" "0.7541709343165697" "0.6553652292341736" "0.89179931065241" "0.3780445925677818" "0.6796025199206561" "0.6046193371046116" "0.8933410670564788" "0.8654666447090715" "0.8914938016764471" "0.18610720239953094" "0.7561568657712872" "0.44528433145260515" "0.9696417725691979" "0.8087651016663615" "0.25610595083609256" "0.37138747121212035" "0.6159900231555204" "0.1356496333108077" "0.5645286188099554" "0.9719617493553843" "0.061366829718462856" "0.4585949426970206" "0.8299887311475092" "0.06667976957690724" "0.6610270108009304" "0.39319632973696295" "0.687070300947694" "0.5900260917926095" "0.9405013082709226" "0.14443833295460218" "0.3359277493526316" "0.7448558015155979" "0.291450401757138" "0.8196807663289543" "0.5986130273184203" "0.26955382564496855" "0.6592127107000334" "0.20869191542486099" "0.24401413325254384" "0.7693432281143233" "0.09012312287052149" "0.2810431320646529" "0.2752328598998388" "0.6856882226466181" "0.5680636711525475" "0.3659395292034653" "0.05468019152686576" "0.5046998570470287" "0.6086461929502132" "0.02345486240845407" "0.8432915711007192" "0.37847877737140867" "0.45274529239598515" "0.34594697944076613" "0.5004462969448631" "0.3976274212783737" "0.7684432186616006" "0.21213569725297" "0.06594702486204396" "0.09606429900281577" "0.20550478238974001" "0.02100937956026039" "0.3399791101327534" "0.7504633485612029" "0.3356418582548364" "0.15548351082690903" "0.8437798862386308" "0.14373890531772582" "0.9883291346377374" "0.5456316774880647" "0.9089866976611372" "0.38898462335622064" "0.3956456166552973" "0.13876351482930271" "0.5393193202718978" "0.0644401931180334" "0.3532786763801603" "0.0834908366224183" "0.5466778161413699" "0.23645550979880303" "0.9683203770699633" "0.884861432658866" "0.983950627182637" "0.02518572825498744" "0.9478493987342336" "0.22125375341032405" "0.8233621081318514" "0.06562428438826062" "0.11627474544940664" "0.8771331209014392" "0.964521618692638" "0.49674343455903314") ("0.012341715444441181" "0.16983717354013406" "0.09920468528804882" "0.9632256863827882" "0.727832145515513" "0.4504541380106568" "0.2975755734713885" "0.37140687603818456" "0.7574181903211246" "0.7375753349071723" "0.8754230383109352" "0.15374868315827972" "0.02063481196607042" "0.1339908287133349" "0.6371308048858195" "0.21213758500318236" "0.33667058193694177" "0.6741364657649198" "0.788513553927884" "0.8184183417021202" "0.6171636188124605" "0.19036185373793546" "0.66458254694391" "0.18438617571923843" "0.46731578429910625" "0.17954587309215597" "0.06621710570725403" "0.9717787744024684" "0.10455729773350031" "0.803853821921793" "0.8398721036617922" "0.5198137357212782" "0.3353697944940459" "0.1826066306427927" "0.7117144790900987" "0.3471126077351687" "0.5004050497763186" "0.43441000294477394" "0.7125205430295269" "0.35639711217444847" "0.3669947357294494" "0.8210882218467181" "0.6351970508705151" "0.05624453177453481" "0.6454407225688521" "0.6399578783106901" "0.5091982352679316" "0.8801338965913139" "0.9217677057650668" "0.6124338377840888" "0.5527467456245361" "0.7093184508451813" "0.9237869805286902" "0.9974835618800608" "0.08595882419448841" "0.9498038199151266" "0.29432665812789605" "0.5577774058580562" "0.35041967334166446" "0.4209857879429628" "0.9926673695243946" "0.42544003382998974" "0.4707577790787181" "0.8870030006330558" "0.7982439400593302" "0.7951528838199926" "0.7821293769982802" "0.8558287546197174" "0.045584943529882294" "0.8771240015261976" "0.88446317845295" "0.7165300655221927" "0.013333693115964662" "0.013678457758851126" "0.8258149891273072" "0.24005110619110548" "0.8190791807059496" "0.8271330046066434" "0.6746626137899527" "0.14820315927994931" "0.6506321105271906" "0.22038334816425764" "0.04486928075983543" "0.14905459305493518" "0.4153076033744658" "0.24717908026349833" "0.7769700853659758" "0.26886395978815725" "0.7271933660974446" "0.05487784169192467" "0.7077691029154758" "0.1931003610324511" "0.06166877426932915" "0.04608824474823359" "0.702680991271857" "0.33821145981907663" "0.2531171359750224" "0.19964829932872807" "0.6015051622695688" "0.5144568258896776"))

# #+name: fig:collocation-points

 ; using LaTeXStrings
using Makie
using GLMakie
fig = Figure()
ax = Axis(fig[1,1] , title="Collocation Points")

scatter!(ax,X_L , label="Data Points")
scatter!(ax,X_D, label="Dirichlet Points")
scatter!(ax,X_N , label="Neumann Points")
arrows!(ax,X_N[1,:] , X_N[2,:] , N[1,:] , N[2,:] , lengthscale=0.1)
axislegend(ax , position=:lt)
save("images/collocation-points.png",fig );



# #+RESULTS: fig:collocation-points
# [[file:images/collocation-points.png]]


 ; using LinearAlgebra
solution = solve(S , X_L , X_D , X_N , N);



# #+RESULTS:
# : PDESolver(PDESystem(Main.k_gauss, Main.∇k_gauss, Main.Δk_gauss, Main.a, Main.∇a, Main.f, Main.g_D, Main.g_N), [0.44373084494754944 0.07892681580529581 0.559106625669447 0.9425709791902743 0.48785917694153547 0.7857840841423287 0.3017574987032916 0.6796020014334652 0.7541709343165697 0.6553652292341736 0.89179931065241 0.3780445925677818 0.6796025199206561 0.6046193371046116 0.8933410670564788 0.8654666447090715 0.8914938016764471 0.18610720239953094 0.7561568657712872 0.44528433145260515 0.9696417725691979 0.8087651016663615 0.25610595083609256 0.37138747121212035 0.6159900231555204 0.1356496333108077 0.5645286188099554 0.9719617493553843 0.061366829718462856 0.4585949426970206 0.8299887311475092 0.06667976957690724 0.6610270108009304 0.39319632973696295 0.687070300947694 0.5900260917926095 0.9405013082709226 0.14443833295460218 0.3359277493526316 0.7448558015155979 0.291450401757138 0.8196807663289543 0.5986130273184203 0.26955382564496855 0.6592127107000334 0.20869191542486099 0.24401413325254384 0.7693432281143233 0.09012312287052149 0.2810431320646529 0.2752328598998388 0.6856882226466181 0.5680636711525475 0.3659395292034653 0.05468019152686576 0.5046998570470287 0.6086461929502132 0.02345486240845407 0.8432915711007192 0.37847877737140867 0.45274529239598515 0.34594697944076613 0.5004462969448631 0.3976274212783737 0.7684432186616006 0.21213569725297 0.06594702486204396 0.09606429900281577 0.20550478238974001 0.02100937956026039 0.3399791101327534 0.7504633485612029 0.3356418582548364 0.15548351082690903 0.8437798862386308 0.14373890531772582 0.9883291346377374 0.5456316774880647 0.9089866976611372 0.38898462335622064 0.3956456166552973 0.13876351482930271 0.5393193202718978 0.0644401931180334 0.3532786763801603 0.0834908366224183 0.5466778161413699 0.23645550979880303 0.9683203770699633 0.884861432658866 0.983950627182637 0.02518572825498744 0.9478493987342336 0.22125375341032405 0.8233621081318514 0.06562428438826062 0.11627474544940664 0.8771331209014392 0.964521618692638 0.49674343455903314; 0.012341715444441181 0.16983717354013406 0.09920468528804882 0.9632256863827882 0.727832145515513 0.4504541380106568 0.2975755734713885 0.37140687603818456 0.7574181903211246 0.7375753349071723 0.8754230383109352 0.15374868315827972 0.02063481196607042 0.1339908287133349 0.6371308048858195 0.21213758500318236 0.33667058193694177 0.6741364657649198 0.788513553927884 0.8184183417021202 0.6171636188124605 0.19036185373793546 0.66458254694391 0.18438617571923843 0.46731578429910625 0.17954587309215597 0.06621710570725403 0.9717787744024684 0.10455729773350031 0.803853821921793 0.8398721036617922 0.5198137357212782 0.3353697944940459 0.1826066306427927 0.7117144790900987 0.3471126077351687 0.5004050497763186 0.43441000294477394 0.7125205430295269 0.35639711217444847 0.3669947357294494 0.8210882218467181 0.6351970508705151 0.05624453177453481 0.6454407225688521 0.6399578783106901 0.5091982352679316 0.8801338965913139 0.9217677057650668 0.6124338377840888 0.5527467456245361 0.7093184508451813 0.9237869805286902 0.9974835618800608 0.08595882419448841 0.9498038199151266 0.29432665812789605 0.5577774058580562 0.35041967334166446 0.4209857879429628 0.9926673695243946 0.42544003382998974 0.4707577790787181 0.8870030006330558 0.7982439400593302 0.7951528838199926 0.7821293769982802 0.8558287546197174 0.045584943529882294 0.8771240015261976 0.88446317845295 0.7165300655221927 0.013333693115964662 0.013678457758851126 0.8258149891273072 0.24005110619110548 0.8190791807059496 0.8271330046066434 0.6746626137899527 0.14820315927994931 0.6506321105271906 0.22038334816425764 0.04486928075983543 0.14905459305493518 0.4153076033744658 0.24717908026349833 0.7769700853659758 0.26886395978815725 0.7271933660974446 0.05487784169192467 0.7077691029154758 0.1931003610324511 0.06166877426932915 0.04608824474823359 0.702680991271857 0.33821145981907663 0.2531171359750224 0.19964829932872807 0.6015051622695688 0.5144568258896776], [1.0 0.8999999999999999 0.7999999999999998 0.7000000000000002 0.6000000000000001 0.5 0.3999999999999999 0.2999999999999998 0.20000000000000018 0.10000000000000009 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.8999999999999999 0.7999999999999998 0.7000000000000002 0.6000000000000001 0.5 0.3999999999999999 0.2999999999999998 0.20000000000000018 0.10000000000000009 0.0], [0.0 0.2 0.4 0.6 0.8 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.19999999999999996 0.3999999999999999 0.6000000000000001 0.8], [0 0 0 0 0 1 1 1 1 1; -1 -1 -1 -1 -1 0 0 0 0 0], [-4.960132385886682e6, 6.207851386756272e7, -4.6118649654939406e7, 2.0728378848839204e6, -5.915120640356191e7, 2.831825160568682e7, -9.263265821893573e7, -2.7837379564817905e7, -3.8992130454342514e7, -1.1541404976925282e7, -980515.8251471845, -1.1355219296501818e8, -1.1126309207990936e6, 2.605984519285048e7, -2.348540639717068e6, 3.9006616037168745e6, 1.444449676700848e7, -1.0358989541430842e7, 3.303181494010279e7, 1.792892868447479e6, 1.1996012375861036e6, 2.2975450020870892e6, -2.4219336467124015e7, 6.385178693886834e7, 4.6042260502318434e7, -8.797251170443414e7, 2.0025753486419942e7, -1.7553267006766023e6, -1.9166814221910812e7, -2.5554478410896197e7, -2.1091489079280213e7, 2.130641848746739e7, 3.31660763606798e7, 7.728483708632469e7, 1.1534872418590302e9, 1.0679626233286548e7, -1.2612837876599306e7, 1.1498806608602094e7, 1.0928362915738009e8, -7.53342492106177e7, 4.883165736806507e7, -2.2643761688366715e7, 2.9762101168641187e7, -8.478941269068088e6, -9.915108597769421e7, -2.175962427147429e7, 1.9853304740005344e7, 2.3158987223919902e7, 970905.7935078174, 4.085047290715726e7, -1.4228719863570458e8, -1.172678078309013e9, -8.312395233464141e6, -2.4927451425716323e6, 1.3768285671632597e7, 1.0195708570089586e7, -8.619247706689905e6, -4.370475579044759e6, 7.24979113004036e6, -5.453679287772487e8, -1.5392683506165645e6, 5.212570498497315e8, 1.076212722189465e8, -5.907677507849868e6, -7.864799590156452e7, 4.168850829230508e6, -140889.70964707655, 813554.7264424604, 820455.7349150706, -236513.03839058487, -7.938798503531246e6, 1.309752034994146e8, -282197.0283332458, -2.360277947768592e7, 2.3594408692520984e7, 3.086297570765887e6, 2.573246973737319e6, 1.9381940163189188e7, -1.187286627747734e7, 1.0290295559961796e7, -1.4367656367648283e7, 9.816869064012958e7, 5.923150905121971e6, 2.2299407557299705e6, 7.114809956926919e6, -8.072575057912724e7, 4.124741302686196e7, -1.7601836489310592e7, 1.1892297039973994e6, -933570.2128311836, 2.113704710370778e6, 509154.05481787084, -1.1346888586968328e6, 4.601314722954755e7, 1.5029554439358376e7, -1.7049012021200447e6, 6.13544253902326e6, -1.8814261919261299e6, 246781.25578751718, -5.005056412702372e6, -5.57608598195752e7, 3.6292959716790277e8, -9.753398381947682e8, 1.2917447462475948e9, -5.724277028820803e8, -7.576582017380813e8, 1.4178231512631757e9, -1.0312296748546286e9, 3.771407869003263e8, -5.708124183109569e7, 1.2410658756399224e9, -5.048385605213574e9, 6.323152893847832e9, 4.369771165331422e8, -5.623406014052541e9, -4.4580940014088386e8, 5.674696183050256e9, 4.0196282867805934e8, -6.733321171435423e9, 4.917827496451421e9, -1.1447390427819607e9, -1.2197725585694407e-6, 1.8764953043053465e-7, -1.8756335035396943e-7, 7.681422742943115e-9, 954.2041307573558, 18271.661367853638, -45081.87047869094, 35561.915460026576, -7403.255342474988, 1909.694175453])

# #+name: fig:solution

 ; using GLMakie
X = range(-1 , 1 , 100)
Y = range(-1 , 1 , 100)
grid = [ [x,y] for x in X , y in Y]
grid = reduce(vcat , grid)
grid = reshape(grid, 2,:)
fig = Figure()
ax = Axis(fig[1,1])
sol = solution(grid)
sol = reshape(sol , size(X,1) , :)
hm = heatmap!(ax , X,Y, sol)
Colorbar(fig[:, end+1], hm)
save("images/solution.png",fig );
